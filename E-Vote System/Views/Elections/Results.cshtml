@model E_Vote_System.Models.ElectionModel



@{
    ViewBag.Title = "Elections Live Results";
    ViewBag.PageTitle = Model.Name;

    bool ongoing = Model.IsOnGoing;
    bool closed = Model.IsClosed;
    ViewBag.PageSubTitle = ongoing ? "Live voting results" : closed ? "Results for this closed election" : "This election has not yet began";

}

@section BreadCrumbs{

    <li class="breadcrumb-item">
        @Html.ActionLink("Dashboard", "Dashboard", "Home")
    </li>
    <li class="breadcrumb-item">
        <a href="#">@ViewBag.Title</a>
    </li>
}

@if (Model != null)
{
    foreach (var position in Model.ElectionPositionModels)
    {
        @Html.Partial("_SinglePosition", position)

        <hr />
    }
}





<p>
    <a href="@Url.Action("Index")" class="btn btn-danger">
        <i class="fa fa-arrow-left"></i> Back to List
    </a>
</p>




@section Scripts{
    <script src="~/Scripts/jquery.signalR-2.4.2.min.js"></script>
    <script src="~/signalR/hubs"></script>

    <script>



        $(document).ready(function () {

            let data = {};

            $('.chartdiv').each(function (i, e) {

                let chart_container = $(e);

                let position_id = chart_container.data('position-id');                                

                
                am4core.addLicense("ch-custom-attribution");
                am4core.ready(function () {

                    // Themes begin
                    am4core.useTheme(am4themes_animated);
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create(`chartdiv_${position_id}`, am4charts.XYChart);

                    // Add data
                    chart.data = generateChartData();

                    //enable tooltip
                    var title = chart.titles.create();
                    title.text = "Candidate Vote Distributions";
                    title.fontSize = 18;
                    title.tooltipText = "Candidate Vote Distributions";

                    chart.cursor = new am4charts.XYCursor();



                    // Create axes
                    //var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "candidates";
                    categoryAxis.title.text = "Candidates";

                    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                    valueAxis.title.text = "Votes";

                    // Create series
                    var series = chart.series.push(new am4charts.LineSeries());
                    series.dataFields.valueY = "votes";
                    series.dataFields.categoryX = "candidates";
                    series.strokeWidth = 1;
                    series.minBulletDistance = 10;
                    series.tooltipText = "{valueY}";
                    series.fillOpacity = 0.1;
                    series.tooltip.pointerOrientation = "vertical";
                    series.tooltip.background.cornerRadius = 20;
                    series.tooltip.background.fillOpacity = 0.5;
                    series.tooltip.label.padding(12, 12, 12, 12)
                    //series.lines.template.tooltipText = "{name}: {categoryX}: {valueY}";


                    var axisTooltip = categoryAxis.tooltip;
                    axisTooltip.background.fill = am4core.color("#07BEB8");
                    axisTooltip.background.strokeWidth = 0;
                    axisTooltip.background.cornerRadius = 3;
                    axisTooltip.background.pointerLength = 0;
                    axisTooltip.dy = 5;

                    var dropShadow = new am4core.DropShadowFilter();
                    dropShadow.dy = 1;
                    dropShadow.dx = 1;
                    dropShadow.opacity = 0.5;
                    axisTooltip.filters.push(dropShadow);



                    var seriesRange = categoryAxis.createSeriesRange(series);
                    seriesRange.contents.strokeDasharray = "2,3";
                    seriesRange.contents.stroke = chart.colors.getIndex(8);
                    seriesRange.contents.strokeWidth = 1;

                    var pattern = new am4core.LinePattern();
                    pattern.rotation = -45;
                    pattern.stroke = seriesRange.contents.stroke;
                    pattern.width = 1000;
                    pattern.height = 1000;
                    pattern.gap = 6;
                    seriesRange.contents.fill = pattern;
                    seriesRange.contents.fillOpacity = 0.5;

                    // Add scrollbar
                    chart.scrollbarX = new am4core.Scrollbar();

                    function generateChartData() {
                        var chartData = [];

                        position_id

                        let labels = chart_container.data("candidate-names").split(",");
                        //let series = labels.;


                        labels.forEach(function (item, index) {
                            chartData.push({
                                candidates: item,
                                votes: 0
                            });
                        })

                        return chartData;
                    }


                    // add range
                    var range = categoryAxis.axisRanges.push(new am4charts.DateAxisDataItem());
                    range.grid.stroke = chart.colors.getIndex(0);
                    range.grid.strokeOpacity = 1;
                    range.bullet = new am4core.ResizeButton();
                    range.bullet.background.fill = chart.colors.getIndex(0);
                    range.bullet.background.states.copyFrom(chart.zoomOutButton.background.states);
                    range.bullet.minX = 0;
                    range.bullet.adapter.add("minY", function (minY, target) {
                        target.maxY = chart.plotContainer.maxHeight;
                        target.maxX = chart.plotContainer.maxWidth;
                        return chart.plotContainer.maxHeight;
                    })

                    range.bullet.events.on("dragged", function () {
                        range.value = categoryAxis.xToValue(range.bullet.pixelX);
                        seriesRange.value = range.value;
                    })


                    var firstTime = chart.data[0].votes;
                    var lastTime = chart.data[chart.data.length - 1].votes;
                    var date = firstTime + (lastTime - firstTime) / 2;

                    range.balance = date;

                    seriesRange.balance = date;
                    seriesRange.endDate = chart.data[chart.data.length - 1].votes;


                    document.addEventListener("visibilitychange", function () {
                        if (document.hidden) {
                            if (interval) {
                                clearInterval(interval);
                            }
                        }
                        else {
                            startInterval();
                        }
                    }, false);

                    // add data
                    var interval;
                    function startInterval() {
                        interval = setInterval(function () {
                            


                            for (const key in data) {
                                let position_name = `${key}`;

                                let posn_id = position_name.substring(position_name.indexOf("_") + 1);


                                if (position_id == posn_id) {
                                    let newData = data[`${key}`];

                                    let newSeries = newData[`series`];

                                    newSeries.forEach(function (e, i) {
                                        


                                        if (chart.data[i]['votes'] != e) {
                                            chart.data[i]['votes'] = e;

                                            chart.invalidateData();
                                        }
                                    })
                                }
                            }                           


                        }, 1000);
                    }

                    startInterval();

                });


            });





            var electionsHub = $.connection.electionsHub;

            electionsHub.client.receiveVotes = function (votes) {

                console.log(votes);

                $(".candidate_card").each(function (i, e) {

                    let candidate_id = $(e).data("candidate-id");
                    let position_id = $(e).data("position-id");

                    let candidateVotes = votes.filter(v => v.CandidateId == candidate_id && v.PositionId == position_id);

                    const candidateVotesCount = candidateVotes.length;
                    let totalVotesCount = votes.filter(v => v.PositionId == position_id).length;

                    const candidatePercentage = (candidateVotesCount / totalVotesCount * 100).toFixed(2);

                    $(e).find('.candidate_votes_count').text(candidateVotesCount);
                    $(e).find('.candidate_votes_perc').text(`${candidatePercentage}%`);

                });

                $('.chartdiv').each(function (i, e) {

                    const position_id = $(e).data('position-id');

                    let data_position_candidate_names = $(e).data('candidate-names').split(',');
                    let data_position_candidate_ids = $(e).data('candidate-ids').split(',');

                    
                    let series = [];
                    let labels = [];

                    data_position_candidate_ids.forEach(function (c, i) {
                        let candidateVotes = votes.filter(v => v.CandidateId == c && v.PositionId == position_id).length;
                        let candidateName = data_position_candidate_names[i];

                        series.push(candidateVotes);
                        labels.push(candidateName);
                    });

                    let dt = { labels, series };

                    data[`position_${position_id}`] = dt;

                    console.log(data);


                });

            }


            $.connection.hub.start().done(function () {

                setInterval(function () {

                    electionsHub.server.fetchVotes();

                },1000);




            }).fail(function (e) {
                alert(e);
            });


        });




    </script>


    
}
